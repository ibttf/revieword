'use strict';

exports.__esModule = true;
exports.fromRange = fromRange;
exports.toRange = toRange;

var _getDocument = require('get-document');

var _getDocument2 = _interopRequireDefault(_getDocument);

var _domSeek = require('dom-seek');

var _domSeek2 = _interopRequireDefault(_domSeek);

var _simpleXpathPosition = require('simple-xpath-position');

var xpath = _interopRequireWildcard(_simpleXpathPosition);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var SHOW_TEXT = 4;

/**
 * Convert a `Range` to a pair of XPath expressions and offsets.
 *
 * If the optional parameter `root` is supplied, the computed XPath expressions
 * will be relative to it.
 *
 * @param {Range} range The Range to convert.
 * @param {Node} [root] The root context for the XPath expressions.
 * @returns {{start, startOffset, end, endOffset}}
 */
function fromRange(range, root) {
  var sc = range.startContainer;
  var so = range.startOffset;
  var ec = range.endContainer;
  var eo = range.endOffset;

  var start = xpath.fromNode(sc, root);
  var end = xpath.fromNode(ec, root);

  return {
    start: start,
    end: end,
    startOffset: so,
    endOffset: eo
  };
}

/**
 * Construct a `Range` from the given XPath expressions and offsets.
 *
 * If the optional parameter `root` is supplied, the XPath expressions are
 * evaluated as relative to it.
 *
 * @param {string} startPath An XPath expression for the start container.
 * @param {Number} startOffset The textual offset within the start container.
 * @param {string} endPath An XPath expression for the end container.
 * @param {Number} endOffset The textual offset within the end container.
 * @param {Node} [root] The root context for the XPath expressions.
 * @returns Range
 */
function toRange(startPath, startOffset, endPath, endOffset, root) {
  var document = (0, _getDocument2['default'])(root);

  var sc = xpath.toNode(startPath, root);
  if (sc === null) throw notFound('start');

  var si = document.createNodeIterator(sc, SHOW_TEXT);
  var so = startOffset - (0, _domSeek2['default'])(si, startOffset);

  sc = si.referenceNode;
  if (!si.pointerBeforeReferenceNode) {
    if (so > 0) throw indexSize('start');
    so += sc.length;
  }

  var ec = xpath.toNode(endPath, root);
  if (ec === null) throw notFound('end');

  var ei = document.createNodeIterator(ec, SHOW_TEXT);
  var eo = endOffset - (0, _domSeek2['default'])(ei, endOffset);

  ec = ei.referenceNode;
  if (!ei.pointerBeforeReferenceNode) {
    if (eo > 0) throw indexSize('end');
    eo += ec.length;
  }

  var range = document.createRange();
  range.setStart(sc, so);
  range.setEnd(ec, eo);

  return range;

  function notFound(which) {
    var error = new Error('The ' + which + ' node was not found.');
    error.name = 'NotFoundError';
    return error;
  }

  function indexSize(which) {
    var error = new Error('There is no text at the requested ' + which + ' offset.');
    error.name = 'IndexSizeError';
    return error;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yYW5nZS5qcyJdLCJuYW1lcyI6WyJmcm9tUmFuZ2UiLCJ0b1JhbmdlIiwieHBhdGgiLCJTSE9XX1RFWFQiLCJyYW5nZSIsInJvb3QiLCJzYyIsInN0YXJ0Q29udGFpbmVyIiwic28iLCJzdGFydE9mZnNldCIsImVjIiwiZW5kQ29udGFpbmVyIiwiZW8iLCJlbmRPZmZzZXQiLCJzdGFydCIsImZyb21Ob2RlIiwiZW5kIiwic3RhcnRQYXRoIiwiZW5kUGF0aCIsImRvY3VtZW50IiwidG9Ob2RlIiwibm90Rm91bmQiLCJzaSIsImNyZWF0ZU5vZGVJdGVyYXRvciIsInJlZmVyZW5jZU5vZGUiLCJwb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSIsImluZGV4U2l6ZSIsImxlbmd0aCIsImVpIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsIndoaWNoIiwiZXJyb3IiLCJFcnJvciIsIm5hbWUiXSwibWFwcGluZ3MiOiI7OztRQWlCZ0JBLFMsR0FBQUEsUztRQStCQUMsTyxHQUFBQSxPOztBQWhEaEI7Ozs7QUFDQTs7OztBQUNBOztJQUFZQyxLOzs7Ozs7QUFFWixJQUFNQyxZQUFZLENBQWxCOztBQUdBOzs7Ozs7Ozs7O0FBVU8sU0FBU0gsU0FBVCxDQUFtQkksS0FBbkIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQ3JDLE1BQUlDLEtBQUtGLE1BQU1HLGNBQWY7QUFDQSxNQUFJQyxLQUFLSixNQUFNSyxXQUFmO0FBQ0EsTUFBSUMsS0FBS04sTUFBTU8sWUFBZjtBQUNBLE1BQUlDLEtBQUtSLE1BQU1TLFNBQWY7O0FBRUEsTUFBSUMsUUFBUVosTUFBTWEsUUFBTixDQUFlVCxFQUFmLEVBQW1CRCxJQUFuQixDQUFaO0FBQ0EsTUFBSVcsTUFBTWQsTUFBTWEsUUFBTixDQUFlTCxFQUFmLEVBQW1CTCxJQUFuQixDQUFWOztBQUVBLFNBQU87QUFDTFMsV0FBT0EsS0FERjtBQUVMRSxTQUFLQSxHQUZBO0FBR0xQLGlCQUFhRCxFQUhSO0FBSUxLLGVBQVdEO0FBSk4sR0FBUDtBQU1EOztBQUdEOzs7Ozs7Ozs7Ozs7O0FBYU8sU0FBU1gsT0FBVCxDQUFpQmdCLFNBQWpCLEVBQTRCUixXQUE1QixFQUF5Q1MsT0FBekMsRUFBa0RMLFNBQWxELEVBQTZEUixJQUE3RCxFQUFtRTtBQUN4RSxNQUFJYyxXQUFXLDhCQUFZZCxJQUFaLENBQWY7O0FBRUEsTUFBSUMsS0FBS0osTUFBTWtCLE1BQU4sQ0FBYUgsU0FBYixFQUF3QlosSUFBeEIsQ0FBVDtBQUNBLE1BQUlDLE9BQU8sSUFBWCxFQUFpQixNQUFNZSxTQUFTLE9BQVQsQ0FBTjs7QUFFakIsTUFBSUMsS0FBS0gsU0FBU0ksa0JBQVQsQ0FBNEJqQixFQUE1QixFQUFnQ0gsU0FBaEMsQ0FBVDtBQUNBLE1BQUlLLEtBQUtDLGNBQWMsMEJBQUthLEVBQUwsRUFBU2IsV0FBVCxDQUF2Qjs7QUFFQUgsT0FBS2dCLEdBQUdFLGFBQVI7QUFDQSxNQUFJLENBQUNGLEdBQUdHLDBCQUFSLEVBQW9DO0FBQ2xDLFFBQUlqQixLQUFLLENBQVQsRUFBWSxNQUFNa0IsVUFBVSxPQUFWLENBQU47QUFDWmxCLFVBQU1GLEdBQUdxQixNQUFUO0FBQ0Q7O0FBRUQsTUFBSWpCLEtBQUtSLE1BQU1rQixNQUFOLENBQWFGLE9BQWIsRUFBc0JiLElBQXRCLENBQVQ7QUFDQSxNQUFJSyxPQUFPLElBQVgsRUFBaUIsTUFBTVcsU0FBUyxLQUFULENBQU47O0FBRWpCLE1BQUlPLEtBQUtULFNBQVNJLGtCQUFULENBQTRCYixFQUE1QixFQUFnQ1AsU0FBaEMsQ0FBVDtBQUNBLE1BQUlTLEtBQUtDLFlBQVksMEJBQUtlLEVBQUwsRUFBU2YsU0FBVCxDQUFyQjs7QUFFQUgsT0FBS2tCLEdBQUdKLGFBQVI7QUFDQSxNQUFJLENBQUNJLEdBQUdILDBCQUFSLEVBQW9DO0FBQ2xDLFFBQUliLEtBQUssQ0FBVCxFQUFZLE1BQU1jLFVBQVUsS0FBVixDQUFOO0FBQ1pkLFVBQU1GLEdBQUdpQixNQUFUO0FBQ0Q7O0FBRUQsTUFBSXZCLFFBQVFlLFNBQVNVLFdBQVQsRUFBWjtBQUNBekIsUUFBTTBCLFFBQU4sQ0FBZXhCLEVBQWYsRUFBbUJFLEVBQW5CO0FBQ0FKLFFBQU0yQixNQUFOLENBQWFyQixFQUFiLEVBQWlCRSxFQUFqQjs7QUFFQSxTQUFPUixLQUFQOztBQUVBLFdBQVNpQixRQUFULENBQWtCVyxLQUFsQixFQUF5QjtBQUN2QixRQUFJQyxRQUFRLElBQUlDLEtBQUosVUFBaUJGLEtBQWpCLDBCQUFaO0FBQ0FDLFVBQU1FLElBQU4sR0FBYSxlQUFiO0FBQ0EsV0FBT0YsS0FBUDtBQUNEOztBQUVELFdBQVNQLFNBQVQsQ0FBbUJNLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUlDLFFBQVEsSUFBSUMsS0FBSix3Q0FBK0NGLEtBQS9DLGNBQVo7QUFDQUMsVUFBTUUsSUFBTixHQUFhLGdCQUFiO0FBQ0EsV0FBT0YsS0FBUDtBQUNEO0FBQ0YiLCJmaWxlIjoicmFuZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0RG9jdW1lbnQgZnJvbSAnZ2V0LWRvY3VtZW50J1xuaW1wb3J0IHNlZWsgZnJvbSAnZG9tLXNlZWsnXG5pbXBvcnQgKiBhcyB4cGF0aCBmcm9tICdzaW1wbGUteHBhdGgtcG9zaXRpb24nXG5cbmNvbnN0IFNIT1dfVEVYVCA9IDRcblxuXG4vKipcbiAqIENvbnZlcnQgYSBgUmFuZ2VgIHRvIGEgcGFpciBvZiBYUGF0aCBleHByZXNzaW9ucyBhbmQgb2Zmc2V0cy5cbiAqXG4gKiBJZiB0aGUgb3B0aW9uYWwgcGFyYW1ldGVyIGByb290YCBpcyBzdXBwbGllZCwgdGhlIGNvbXB1dGVkIFhQYXRoIGV4cHJlc3Npb25zXG4gKiB3aWxsIGJlIHJlbGF0aXZlIHRvIGl0LlxuICpcbiAqIEBwYXJhbSB7UmFuZ2V9IHJhbmdlIFRoZSBSYW5nZSB0byBjb252ZXJ0LlxuICogQHBhcmFtIHtOb2RlfSBbcm9vdF0gVGhlIHJvb3QgY29udGV4dCBmb3IgdGhlIFhQYXRoIGV4cHJlc3Npb25zLlxuICogQHJldHVybnMge3tzdGFydCwgc3RhcnRPZmZzZXQsIGVuZCwgZW5kT2Zmc2V0fX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21SYW5nZShyYW5nZSwgcm9vdCkge1xuICBsZXQgc2MgPSByYW5nZS5zdGFydENvbnRhaW5lclxuICBsZXQgc28gPSByYW5nZS5zdGFydE9mZnNldFxuICBsZXQgZWMgPSByYW5nZS5lbmRDb250YWluZXJcbiAgbGV0IGVvID0gcmFuZ2UuZW5kT2Zmc2V0XG5cbiAgbGV0IHN0YXJ0ID0geHBhdGguZnJvbU5vZGUoc2MsIHJvb3QpXG4gIGxldCBlbmQgPSB4cGF0aC5mcm9tTm9kZShlYywgcm9vdClcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZCxcbiAgICBzdGFydE9mZnNldDogc28sXG4gICAgZW5kT2Zmc2V0OiBlbyxcbiAgfVxufVxuXG5cbi8qKlxuICogQ29uc3RydWN0IGEgYFJhbmdlYCBmcm9tIHRoZSBnaXZlbiBYUGF0aCBleHByZXNzaW9ucyBhbmQgb2Zmc2V0cy5cbiAqXG4gKiBJZiB0aGUgb3B0aW9uYWwgcGFyYW1ldGVyIGByb290YCBpcyBzdXBwbGllZCwgdGhlIFhQYXRoIGV4cHJlc3Npb25zIGFyZVxuICogZXZhbHVhdGVkIGFzIHJlbGF0aXZlIHRvIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydFBhdGggQW4gWFBhdGggZXhwcmVzc2lvbiBmb3IgdGhlIHN0YXJ0IGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydE9mZnNldCBUaGUgdGV4dHVhbCBvZmZzZXQgd2l0aGluIHRoZSBzdGFydCBjb250YWluZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUGF0aCBBbiBYUGF0aCBleHByZXNzaW9uIGZvciB0aGUgZW5kIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBlbmRPZmZzZXQgVGhlIHRleHR1YWwgb2Zmc2V0IHdpdGhpbiB0aGUgZW5kIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7Tm9kZX0gW3Jvb3RdIFRoZSByb290IGNvbnRleHQgZm9yIHRoZSBYUGF0aCBleHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIFJhbmdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1JhbmdlKHN0YXJ0UGF0aCwgc3RhcnRPZmZzZXQsIGVuZFBhdGgsIGVuZE9mZnNldCwgcm9vdCkge1xuICBsZXQgZG9jdW1lbnQgPSBnZXREb2N1bWVudChyb290KVxuXG4gIGxldCBzYyA9IHhwYXRoLnRvTm9kZShzdGFydFBhdGgsIHJvb3QpXG4gIGlmIChzYyA9PT0gbnVsbCkgdGhyb3cgbm90Rm91bmQoJ3N0YXJ0JylcblxuICBsZXQgc2kgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Ioc2MsIFNIT1dfVEVYVClcbiAgbGV0IHNvID0gc3RhcnRPZmZzZXQgLSBzZWVrKHNpLCBzdGFydE9mZnNldClcblxuICBzYyA9IHNpLnJlZmVyZW5jZU5vZGVcbiAgaWYgKCFzaS5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSkge1xuICAgIGlmIChzbyA+IDApIHRocm93IGluZGV4U2l6ZSgnc3RhcnQnKVxuICAgIHNvICs9IHNjLmxlbmd0aFxuICB9XG5cbiAgbGV0IGVjID0geHBhdGgudG9Ob2RlKGVuZFBhdGgsIHJvb3QpXG4gIGlmIChlYyA9PT0gbnVsbCkgdGhyb3cgbm90Rm91bmQoJ2VuZCcpXG5cbiAgbGV0IGVpID0gZG9jdW1lbnQuY3JlYXRlTm9kZUl0ZXJhdG9yKGVjLCBTSE9XX1RFWFQpXG4gIGxldCBlbyA9IGVuZE9mZnNldCAtIHNlZWsoZWksIGVuZE9mZnNldClcblxuICBlYyA9IGVpLnJlZmVyZW5jZU5vZGVcbiAgaWYgKCFlaS5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSkge1xuICAgIGlmIChlbyA+IDApIHRocm93IGluZGV4U2l6ZSgnZW5kJylcbiAgICBlbyArPSBlYy5sZW5ndGhcbiAgfVxuXG4gIGxldCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKClcbiAgcmFuZ2Uuc2V0U3RhcnQoc2MsIHNvKVxuICByYW5nZS5zZXRFbmQoZWMsIGVvKVxuXG4gIHJldHVybiByYW5nZVxuXG4gIGZ1bmN0aW9uIG5vdEZvdW5kKHdoaWNoKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKGBUaGUgJHt3aGljaH0gbm9kZSB3YXMgbm90IGZvdW5kLmApXG4gICAgZXJyb3IubmFtZSA9ICdOb3RGb3VuZEVycm9yJ1xuICAgIHJldHVybiBlcnJvclxuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXhTaXplKHdoaWNoKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKGBUaGVyZSBpcyBubyB0ZXh0IGF0IHRoZSByZXF1ZXN0ZWQgJHt3aGljaH0gb2Zmc2V0LmApXG4gICAgZXJyb3IubmFtZSA9ICdJbmRleFNpemVFcnJvcidcbiAgICByZXR1cm4gZXJyb3JcbiAgfVxufVxuIl19