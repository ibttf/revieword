import React from 'react';
import styled from 'styled-components';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var DIRECTIONS = {
  up: 'column-reverse',
  down: 'column',
  left: 'row-reverse',
  right: 'row'
};
var StyledUl = styled(function (_ref) {
  var rest = _objectWithoutPropertiesLoose(_ref, ["direction"]);

  return React.createElement("ul", Object.assign({}, rest));
})(function (_ref2) {
  var direction = _ref2.direction;
  return {
    display: 'flex',
    width: 'fit-content',
    listStyle: 'none',
    margin: '0',
    padding: '0',
    flexDirection: DIRECTIONS[direction],
    justifyContent: 'center',
    alignItems: 'center'
  };
});
var Directions;

(function (Directions) {
  Directions["Up"] = "up";
  Directions["Down"] = "down";
  Directions["Left"] = "left";
  Directions["Right"] = "right";
})(Directions || (Directions = {}));

var FloatingMenu = function FloatingMenu(_ref3) {
  var _ref3$slideSpeed = _ref3.slideSpeed,
      slideSpeed = _ref3$slideSpeed === void 0 ? 500 : _ref3$slideSpeed,
      _ref3$direction = _ref3.direction,
      direction = _ref3$direction === void 0 ? Directions.Down : _ref3$direction,
      _ref3$isOpen = _ref3.isOpen,
      isOpen = _ref3$isOpen === void 0 ? false : _ref3$isOpen,
      _ref3$spacing = _ref3.spacing,
      spacing = _ref3$spacing === void 0 ? 8 : _ref3$spacing,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["slideSpeed", "direction", "isOpen", "spacing", "children"]);

  var childrenWithProps = React.Children.map(children, function (child, index) {
    return React.cloneElement(child, {
      isOpen: isOpen,
      slideSpeed: slideSpeed,
      direction: direction,
      index: index,
      spacing: spacing
    });
  });
  return React.createElement(StyledUl, Object.assign({
    direction: direction
  }, rest), childrenWithProps);
};

var Wrapper = styled(function (_ref) {
  var rest = _objectWithoutPropertiesLoose(_ref, ["isOpen", "slideSpeed", "background", "size", "spacing", "direction"]);

  return React.createElement("li", Object.assign({}, rest));
})(function (_ref2) {
  var isOpen = _ref2.isOpen,
      slideSpeed = _ref2.slideSpeed,
      background = _ref2.background,
      size = _ref2.size,
      spacing = _ref2.spacing,
      direction = _ref2.direction;
  return {
    background: background,
    display: 'flex',
    border: 'none',
    borderRadius: '50%',
    boxShadow: '0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28)',
    cursor: 'pointer',
    outline: 'none',
    padding: '0',
    WebkitUserDrag: 'none',
    fontWeight: 'bold',
    justifyContent: 'center',
    alignItems: 'center',
    opacity: isOpen ? 1 : 0,
    transition: "all " + slideSpeed + "ms",
    width: size,
    height: size,
    marginTop: direction === 'down' ? spacing : 0,
    marginBottom: direction === 'up' ? spacing : 0,
    marginLeft: direction === 'right' ? spacing : 0,
    marginRight: direction === 'left' ? spacing : 0,
    pointerEvents: isOpen ? 'auto' : 'none'
  };
});

var ChildButton = function ChildButton(_ref3) {
  var _ref3$direction = _ref3.direction,
      direction = _ref3$direction === void 0 ? Directions.Up : _ref3$direction,
      _ref3$index = _ref3.index,
      index = _ref3$index === void 0 ? 1 : _ref3$index,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 40 : _ref3$size,
      _ref3$spacing = _ref3.spacing,
      spacing = _ref3$spacing === void 0 ? 0 : _ref3$spacing,
      _ref3$isOpen = _ref3.isOpen,
      isOpen = _ref3$isOpen === void 0 ? false : _ref3$isOpen,
      _ref3$onClick = _ref3.onClick,
      onClick = _ref3$onClick === void 0 ? null : _ref3$onClick,
      icon = _ref3.icon,
      rest = _objectWithoutPropertiesLoose(_ref3, ["direction", "index", "size", "spacing", "isOpen", "onClick", "icon"]);

  var offsetX = direction === 'right' ? (size + spacing) * index : direction === 'left' ? (size + spacing) * index * -1 : 0;
  var offsetY = direction === 'down' ? (size + spacing) * index : direction === 'up' ? (size + spacing) * index * -1 : 0;
  return React.createElement(Wrapper, Object.assign({
    isOpen: isOpen,
    size: size,
    spacing: spacing,
    direction: direction
  }, rest, {
    onClick: isOpen ? onClick : null,
    style: {
      transform: "translate(" + (isOpen ? 0 : -offsetX) + "px, " + (isOpen ? 0 : -offsetY) + "px)"
    }
  }), icon);
};

var Wrapper$1 = styled('a')(function (_ref) {
  var background = _ref.background,
      size = _ref.size;
  return {
    display: 'flex',
    border: 'none',
    borderRadius: '50%',
    boxShadow: '0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28)',
    cursor: 'pointer',
    outline: 'none',
    padding: '0',
    WebkitUserDrag: 'none',
    fontWeight: 'bold',
    justifyContent: 'center',
    alignItems: 'center',
    width: size,
    height: size,
    background: background
  };
});
var IconWrapper = styled(function (_ref2) {
  var rest = _objectWithoutPropertiesLoose(_ref2, ["isOpen"]);

  return React.createElement("div", Object.assign({}, rest));
})(function (_ref3) {
  var isOpen = _ref3.isOpen;
  return {
    display: 'flex',
    textDecoration: 'none',
    WebkitTransition: '-webkit-transform 300ms',
    transition: 'transform 300ms',
    WebkitTransform: "rotate(" + (isOpen ? 180 : 0) + "deg)",
    transform: "rotate(" + (isOpen ? 180 : 0) + "deg)"
  };
});

var MainButton = function MainButton(_ref4) {
  var iconResting = _ref4.iconResting,
      iconActive = _ref4.iconActive,
      isOpen = _ref4.isOpen,
      rest = _objectWithoutPropertiesLoose(_ref4, ["iconResting", "iconActive", "isOpen"]);

  return React.createElement(Wrapper$1, Object.assign({}, rest), React.createElement(IconWrapper, {
    isOpen: isOpen
  }, isOpen ? iconActive : iconResting));
};

export { ChildButton, Directions, FloatingMenu, MainButton };
//# sourceMappingURL=index.modern.js.map
